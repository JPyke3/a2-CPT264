#!/bin/bash

# build_kernel
# Author: Jacob Pyke <s3755145@student.rmit.edu.au>

# Build Variables
BUILDDIR=$HOME/.build

# Apt Frontent Variable
export DEBIAN_FRONTEND=noninteractive

# Binary Variables
GIT="/usr/bin/git"
MKDIR="/bin/mkdir"
CP="/bin/cp"
SUDO="/usr/bin/sudo"
APT="/usr/bin/apt"
MAKE="/usr/bin/make"
TAR="/bin/tar"
SYSTEMCTL="/bin/systemctl"
KILL="/bin/kill"

# Raspberry Pi 4 Kernel Version
KERNEL=kernel7l

# Function to create a build directory structure
create_build_environment () {
    # Create a build directory for the script
   $MKDIR "$BUILDDIR"
}

# Function for handling cloning the configuration repo and applying the control_cpu script
clone_config_repo () {
    # Clone the config repo using ssh, this is to ensure the repo can remain private
    $GIT clone git@github.com:JPyke3/a2-CPT264.git "$BUILDDIR"/config
    # Start the control_cpu script
    $SUDO "$BUILDDIR"/config/control_cpu &
    CONTROLPID=$!
}

# Function for cloning the official RaspberryPiOS kerenl repo to the builddir
clone_raspberry_repo () {
    # Install all needed dependencies for compiling the kernel
    $SUDO $APT -y install git bc bison flex libssl-dev make
    # Clone the RaspberryPiOS Repo
    $GIT clone --depth=1 https://github.com/raspberrypi/linux "$BUILDDIR"/linux 
}

# Function for copying the Kernel config
copy_config () {
    # Copy the custom config to the build directory
   $CP "$BUILDDIR"/config/.config "$BUILDDIR"/linux/. 
}

# Function for the actual build process
build_kernel () {
    # Change directory to the kernel directory, Exit option in case the dir doesn't exist
    cd "$BUILDDIR"/linux || exit
    # Compile the Kernel using all cores available to the Raspberry Pi
    $MAKE -j4 zImage modules dtbs
}

# Function to handle backups
backup_boot () {
    # Backup the entire boot directory, compress it and put it in the User's Home Dir
    $TAR -zcvf "$HOME"/boot_backup.tar.gz /boot
}

# Function for handling the install process
install_kernel () {
    # Make the kernel modules
    $SUDO $MAKE modules_install
    # Move required files to the boot directory
    $SUDO $CP arch/arm/boot/dts/*.dtb /boot/
    $SUDO $CP arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
    $SUDO $CP arch/arm/boot/dts/overlays/README /boot/overlays/
    # Move the kernel image file to the boot directory
    $SUDO $CP arch/arm/boot/zImage /boot/$KERNEL.img
}

# Reboot Function
reboot_system () {
    # Send a USR2 Signal to the process running the control LED script
    $SUDO $KILL -USR2 $CONTROLPID
    # Use Systemctl to reboot the system
    $SUDO $SYSTEMCTL reboot -i
}

# Main Method of the bash script
create_build_environment
clone_config_repo
clone_raspberry_repo
copy_config
build_kernel
backup_boot
install_kernel
reboot_system
exit 0


