#!/bin/bash

# control_cpu
# Author: Jacob Pyke <s3755145@student.rmit.edu.au>

# Binary Variables
ECHO="/bin/echo"
TOP="/usr/bin/top"
GREP="/bin/grep"
AWK="/usr/bin/awk"
SUDO="/usr/bin/sudo"
SU="/bin/su"

# Used to stop the LED Triggering
initialize () {
    # Turn off the LED Triggering from Disk Activity
    $SUDO $SU -c "${ECHO} none > /sys/class/leds/led0/trigger"
}

# Used to turn on the LED
turn_on_led () {
    $SUDO $SU -c "${ECHO} 1 > /sys/class/leds/led0/brightness"
}

# Used to turn off the LED
turn_off_led () {
    $SUDO $SU -c "${ECHO} 0 > /sys/class/leds/led0/brightness"
}

# Polls the CPU and writes the usage to $USAGE and the remainder of $USAGE to $NONUSAGE
poll_cpu () {
    USAGE=$(${TOP} -bn1 | ${GREP} 'Cpu(s)' | ${AWK} '{printf "%.0f\n", $2}' | ${AWK} '{ print $1 / 100}')
    NONUSAGE=$(${TOP} -bn1 | ${GREP} 'Cpu(s)' | ${AWK} '{printf "%.0f\n", 100 - $2}' | ${AWK} '{ print $1 / 100}')
}

# Function to handle cleaning up from this bash script, this will revert the pi back to it's original state
cleanup () {
    turn_off_led
    # Give the kernel LED access again
    $SUDO $SU -c "${ECHO} mmc0 > /sys/class/leds/led0/trigger"
    exit 0
}

trap cleanup SIGUSR2 

initialize
turn_off_led
# Loop that will loop forever
# TODO: Interrupt signal
while true
do
    # Poll the current CPU usage
    poll_cpu "$@"
    # Turn on the LED
    turn_on_led
    # Sleep for the CPU usage, this is handled in seconds, so if usage is 0.5, then it is half a second
    sleep "$USAGE"
    # Turn off the LED after the sleep has finished
    turn_off_led
    # Sleep for the remainder, if the usage is 0.2 then the script will sleep for 0.8
    sleep "$NONUSAGE"
done


